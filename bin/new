#!/usr/local/bin/node
const inquirer = require("inquirer");
const chalk = require("chalk");
const fs = require("fs");
const { exec } = require('child_process');

String.prototype.$firstCaps = function() {
  return this[0].toUpperCase() + this.slice(1);
}

console.log("Hi, It's Malta. Do you need a new component? (^C to exit)");

var questions = [
  {
    type: 'list',
    name: 'type',
    message: "What's the type of components?",
    choices: ['atoms', 'molecules', 'organisms', 'templates', 'miscellaneous'],
    filter: function(val) {
      const path = {
        'atoms': 'atoms',
        'molecules': 'molecules',
        'organisms': 'organisms',
        'templates': 'templates',
        'miscellaneous': 'misc',
      }
      return path[val];
    }
  },
  {
    type: 'input',
    name: 'name',
    message: "Component name?",
    validate: function(value) {
      var pass = value.match(
        /^[A-Z]\w+$/
      );
      if (pass) {
        return true;
      }
      return 'Please enter a valid component name. Camel case start with Capital Letter(ex SalesBoostFooter)';
    }
  }
];

inquirer.prompt(questions).then(async (answers) => {

  await inquirer.prompt({
    type: 'confirm',
    name: 'confirm',
    message: `Is this right? \n ${JSON.stringify(answers, null, '  ')}`,
    default: false
  }).then(result => { if(result.confirm == false) {console.log(chalk.red("revert!! exit with 0")); process.exit(0)} });

  const path = './src'+ `/${answers.type}/` + answers.name;
  const code = `export { ${answers.name} } from \\"./${answers.type}/${answers.name}\\";`

  const mdx = fs
                .readFileSync("./bin/mdx.sample", "utf8")
                .replace(/@Sample/g, answers.name)
                .replace(/@Path/g, answers.type.$firstCaps());

  const tsx = fs
                .readFileSync("./bin/tsx.sample", "utf8")
                .replace(/@Sample/g, answers.name);


  fs.writeFileSync(`${path}.tsx`, tsx, 'utf8');
  console.log(chalk.red('generating') + chalk.green(`${path}.tsx ...`) + chalk.red(' Done'));

  fs.writeFileSync(`${path}.mdx`, mdx, 'utf8');
  console.log(chalk.red('generating') + chalk.green(`${path}.mdx ...`) + chalk.red(' Done'));
  
  exec(`echo "${code}" >> ./src/index.tsx`);
  console.log(chalk.red('append code into ./src/index.tsx << ') + chalk.green(code + "...") + chalk.red(' Done'));

});